Пакет содержит Action которые обрабатывают входной запрос пользователя
именно эти объекты будут сохраняться во внешнее хранилище и восстанавливаться из него
именно эти объекты будут давать команды для удаленного клиента и получать ответы от него 


Все потомки Action должны быть зарегистрированы в объекте ActionBuilder
(нужно добавить их уникальное имя и полный путь к классу)



Общий алгоритм создания Action:
	+++ алгоритм состоит из шагов (ActionStep):
		--- "первый шаг"
   на первом шаге "двигатель" незаметно для пользователя кладет в Action.Store все параметры (ключ, значение), 
которые пользователь послал для инициализации данного действия
   так же "двигатель" кладет в Action.Store параметр с именем "SESSION_ID" значение которого уникальный сессионный идентификатор 
   выдача команд пользователю для отработки
  
		--- "промежуточные шаги"
получение результатов предыдущего шага и складирование этих результатов в Action.Store ( с возможным преобразованием )
задание новых команд для пользователя 
		
		--- "последний шаг"
выдача команд отображения пользователю для получения реакции на инициированное им действие
( нажали на кнопку-> активизировали Action -> получили ответ в виде сообщения, либо изменения интерфейса )


	+++ шаги (ActionStep) состоят из:
 		--- putToStorageFromSubCommand       
положить данные из SubCommand предыдущих шагов (по их уникальным номерам)в хранишище ( c возможным преобразованием Convertor) 
		

		--- двигатель "незаметно" для пользователя очищает все SubCommand
		
		--- addCalculator (**)
добавить задачи (manager.actions.Calculator) для манипуляций с данными в Action.Store
( создать новую переменную на основании одной/нескольких переменных из Action.Store)
 		
		--- addSubCommand (*)
добавить SubCommand - добавить пользователю задание на выполнение задачи 
		
		--- putToSubCommanFromStorage
положить в SubCommand необходимые параметры из Action.Store ( по уникальному номеру SubCommand)
(SubCommand.parameter(byte[]), SubCommand.parameter(String), SubCommand.parameter(int))

  
		--- putToSubCommandInformationFromStorage ( по уникальному номеру SubCommand)
положить в SubCommand необходимую информацию (<String>key, <String>value) из Action.Store 


----------------------------------------------------
* - все команды, которые добавляются в задачи могут содержать условия выполнения
( то есть в конструктор передается объект-потомок класса Condition которое содержит условие выполнения 
команды)

**   на калькуляторы ложится обязанность преобразования/хранения данных
калькуляторы могут брать данные как из хранилища Action.Store так и из базы данных
( но их "рабочей" областью считается Action.Store - приоритет при проектировании нужно делать на 
это хранилище )
положить данные из Внешней базы данных (общение между Action) в хранилище Action (Action.Store)
положить данные из хранилища Action (Action.Store) во внешнюю базу данных (DataBase)
 